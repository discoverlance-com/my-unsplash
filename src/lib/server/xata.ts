// Generated by Xata Codegen 0.23.5. Please do not edit.
import { env } from '$env/dynamic/private';
import { buildClient } from '@xata.io/client';
import type { BaseClientOptions, SchemaInference, XataRecord } from '@xata.io/client';

const tables = [
	{
		name: 'photos',
		columns: [
			{ name: 'url', type: 'string' },
			{ name: 'label', type: 'string' },
			{ name: 'user', type: 'link', link: { table: 'users' } },
			{
				name: 'created_at',
				type: 'datetime',
				notNull: true,
				defaultValue: 'now'
			}
		]
	},
	{
		name: 'users',
		columns: [{ name: 'identifier', type: 'string', unique: true }]
	}
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Photos = InferredTypes['photos'];
export type PhotosRecord = Photos & XataRecord;

export type Users = InferredTypes['users'];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
	photos: PhotosRecord;
	users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
	databaseURL: env.XATA_DATABASE_URL,
	apiKey: env.XATA_API_KEY
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
	constructor(options?: BaseClientOptions) {
		super({ ...defaultOptions, ...options }, tables);
	}
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
	if (instance) return instance;

	instance = new XataClient();
	return instance;
};
